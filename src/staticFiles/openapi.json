{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "Payment Gateway"
  },
  "paths": {
    "/v1/card/creditHolder": {
      "post": {
        "tags": [
          "Card"
        ],
        "summary": "Credit a card payment",
        "operationId": "V1CardCreditHolderPost",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CardPaymentCreditHolderRequest"
            }
          },
          {
            "name": "authToken",
            "in": "header",
            "description": "Gets or sets the authentication token.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CardPaymentCreditHolderResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/v1/payments/card3ds-payment": {
      "put": {
        "tags": [
          "Card3DsPayment"
        ],
        "summary": "Finish the 3DS payment.\r\nReuse the order references and the paymentRequestId (returned from the POST).",
        "operationId": "V1PaymentsCard3ds-paymentPut",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "card3DsPaymentPutRequest",
            "in": "body",
            "description": "The card payment put request.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Card3DsPaymentPutRequest"
            }
          },
          {
            "name": "authToken",
            "in": "header",
            "description": "Gets or sets the authentication token.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CardPaymentResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Card3DsPayment"
        ],
        "summary": "Achieve a 3DS payment (CheckEnrollment)",
        "operationId": "V1PaymentsCard3ds-paymentPost",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "card3DSPaymentRequest",
            "in": "body",
            "description": "All data needed to make a 3DS card payment",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Card3DsPaymentRequest"
            }
          },
          {
            "name": "authToken",
            "in": "header",
            "description": "Gets or sets the authentication token.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CardPaymentResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/v1/payments/card-payment": {
      "post": {
        "tags": [
          "CardPayment"
        ],
        "summary": "Achieve a payment with a card without 3DSecure.\r\nTo achieve a 3DS payment (CheckEnrollment), see the /payment/card3ds-payment resource.",
        "operationId": "V1PaymentsCard-paymentPost",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cardPaymentRequest",
            "in": "body",
            "description": "All data needed to make card payment",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CardPaymentRequest"
            }
          },
          {
            "name": "authToken",
            "in": "header",
            "description": "Gets or sets the authentication token.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CardPaymentResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/v1/payments/duplicate-payment": {
      "post": {
        "tags": [
          "DuplicatePayment"
        ],
        "summary": "Achieve a payment by copy of a previously processed payment, with the same payment method.",
        "operationId": "V1PaymentsDuplicate-paymentPost",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "duplicatePaymentRequest",
            "in": "body",
            "description": "All data needed to make process the payment, with the reference to the previously payment.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DuplicatePaymentRequest"
            }
          },
          {
            "name": "authToken",
            "in": "header",
            "description": "Gets or sets the authentication token.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CardPaymentResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/v1/payments/duplicate-payment/batch": {
      "post": {
        "tags": [
          "DuplicatePayment"
        ],
        "summary": "Achieve a batch of payments by copy of previously processed payments, with the same payment method.",
        "operationId": "V1PaymentsDuplicate-paymentBatchPost",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "duplicatePaymentBatchRequest",
            "in": "body",
            "description": "All data needed to make process the payment, with the reference to the previously payment.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DuplicatePaymentBatchRequest"
            }
          },
          {
            "name": "authToken",
            "in": "header",
            "description": "Gets or sets the authentication token.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CardPaymentResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/v1/payment-options/merchants/{merchantId}/sites/{merchantSiteId}": {
      "get": {
        "tags": [
          "PaymentOptions"
        ],
        "summary": "Gets the payment options for a specified site.",
        "operationId": "V1Payment-optionsMerchantsByMerchantIdSitesByMerchantSiteIdGet",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "The merchant identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "merchantSiteId",
            "in": "path",
            "description": "The merchant site identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "authToken",
            "in": "header",
            "description": "Gets or sets the authentication token.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PaymentOptionsResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/v1/payment-options": {
      "post": {
        "tags": [
          "PaymentOptions"
        ],
        "summary": "Gets the payment options for a specified context.",
        "operationId": "V1Payment-optionsPost",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentOptionsRequest",
            "in": "body",
            "description": "The payment options request.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentOptionsRequest"
            }
          },
          {
            "name": "authToken",
            "in": "header",
            "description": "Gets or sets the authentication token.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PaymentOptionsResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/v1/payment-options/validateEligibility": {
      "post": {
        "tags": [
          "PaymentOptions"
        ],
        "summary": "Validates the eligibility of the given payment option, according to context.",
        "operationId": "V1Payment-optionsValidateEligibilityPost",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "paymentOptionEligibilityRequest",
            "in": "body",
            "description": "The payment option eligibility request.",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "authToken",
            "in": "header",
            "description": "Gets or sets the authentication token.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/payments/{orderRef}/merchants/{merchantId}/sites/{merchantSiteId}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Gets the details for a specified OrderRef.",
        "operationId": "V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderRef",
            "in": "path",
            "description": "The order reference.",
            "required": true,
            "type": "string"
          },
          {
            "name": "merchantId",
            "in": "path",
            "description": "The merchant identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "merchantSiteId",
            "in": "path",
            "description": "The merchant site identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "authToken",
            "in": "header",
            "description": "Gets or sets the authentication token.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PaymentOperationsResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/v1/payments/{orderRef}/merchants/{merchantId}/sites/{merchantSiteId}/{orderTag}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Gets the details for a specified couple of OrderRef/OrderTag.",
        "operationId": "V1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderRef",
            "in": "path",
            "description": "The order reference.",
            "required": true,
            "type": "string"
          },
          {
            "name": "merchantId",
            "in": "path",
            "description": "The merchant identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "merchantSiteId",
            "in": "path",
            "description": "The merchant site identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderTag",
            "in": "path",
            "description": "The order Tag",
            "required": true,
            "type": "string"
          },
          {
            "name": "authToken",
            "in": "header",
            "description": "Gets or sets the authentication token.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PaymentOperationsResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/v1/payments/{orderRef}/operations/{operation}": {
      "put": {
        "tags": [
          "Payments"
        ],
        "summary": "Executes a payment operation on the specified OrderRef.",
        "operationId": "V1PaymentsByOrderRefOperationsByOperationPut",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderRef",
            "in": "path",
            "description": "The OrderRef.",
            "required": true,
            "type": "string"
          },
          {
            "name": "operation",
            "in": "path",
            "description": "The operation to be executed. Can be CAPTURE, CANCELORREFUND, or RECOMPUTE",
            "required": true,
            "type": "string",
            "enum": [
              "unknown",
              "capture",
              "cancelOrRefund",
              "recompute"
            ]
          },
          {
            "name": "paymentOperationRequest",
            "in": "body",
            "description": "The payment operation request. Materialized by the Body of the PUT request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentOperationsRequest"
            }
          },
          {
            "name": "authToken",
            "in": "header",
            "description": "Gets or sets the authentication token.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PaymentOperationsResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/v1/payment-sessions": {
      "post": {
        "tags": [
          "PaymentSession"
        ],
        "summary": "Creates a payment session.",
        "operationId": "V1Payment-sessionsPost",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentSessionRequest",
            "in": "body",
            "description": "The payment session request.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentSessionRequest"
            }
          },
          {
            "name": "authToken",
            "in": "header",
            "description": "Gets or sets the authentication token.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PaymentSessionResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/v1/payment-sessions/{paymentSessionId}/merchants/{merchantId}/sites/{merchantSiteId}": {
      "get": {
        "tags": [
          "PaymentSession"
        ],
        "summary": "Gets the payment session from its id.",
        "operationId": "V1Payment-sessionsByPaymentSessionIdMerchantsByMerchantIdSitesByMerchantSiteIdGet",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentSessionId",
            "in": "path",
            "description": "The payment session id.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "merchantId",
            "in": "path",
            "description": "The merchant Id.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "merchantSiteId",
            "in": "path",
            "description": "The merchant site Id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "authToken",
            "in": "header",
            "description": "Gets or sets the authentication token.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetSessionResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/v1/auth/token": {
      "get": {
        "tags": [
          "SecurityToken"
        ],
        "summary": "Get the token provided by the Security Token Service (STS).\r\nThe authentication token is mandatory for the others api calls.\r\nIt's expire after 48h by default.",
        "description": "See the following lines for example :     GET /v1/auth/token     {        \"authorization\": \"Y2Rpc2NvdW50OmNkaXNjb3VudDEyMzQv\"     }",
        "operationId": "V1AuthTokenGet",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "The credentials (login:password in base64)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/v1/stored-payment-methods/merchants/{merchantId}/sites/{merchantSiteId}/customerRef/{customerRef}": {
      "get": {
        "tags": [
          "StoredPaymentMethods"
        ],
        "summary": "Gets the stored payment methods by customer reference.",
        "operationId": "V1Stored-payment-methodsMerchantsByMerchantIdSitesByMerchantSiteIdCustomerRefByCustomerRefGet",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "The merchant identifier.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "merchantSiteId",
            "in": "path",
            "description": "The merchant site identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "customerRef",
            "in": "path",
            "description": "The customer reference.",
            "required": true,
            "type": "string"
          },
          {
            "name": "authToken",
            "in": "header",
            "description": "Gets or sets the authentication token.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StoredPaymentMethodResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/v1/stored-payment-methods/merchants/{merchantId}/sites/{merchantSiteId}/storedPaymentMethodId/{storedPaymentMethodId}": {
      "get": {
        "tags": [
          "StoredPaymentMethods"
        ],
        "summary": "Gets the stored payment method by identifier.",
        "operationId": "V1Stored-payment-methodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdGet",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "merchantSiteId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "storedPaymentMethodId",
            "in": "path",
            "description": "The stored payment method identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "authToken",
            "in": "header",
            "description": "Gets or sets the authentication token.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StoredPaymentMethodResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "StoredPaymentMethods"
        ],
        "summary": "Deletes the specified stored payment method.",
        "operationId": "V1Stored-payment-methodsMerchantsByMerchantIdSitesByMerchantSiteIdStoredPaymentMethodIdByStoredPaymentMethodIdDelete",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "The merchant identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "merchantSiteId",
            "in": "path",
            "description": "The merchant site identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "storedPaymentMethodId",
            "in": "path",
            "description": "The stored payment method identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "authToken",
            "in": "header",
            "description": "Gets or sets the authentication token.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/v1/stored-payment-methods": {
      "post": {
        "tags": [
          "StoredPaymentMethods"
        ],
        "summary": "Creates the specified stored payment method.",
        "operationId": "V1Stored-payment-methodsPost",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storedPaymentMethodRequest",
            "in": "body",
            "description": "The stored payment method",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StoredPaymentMethodRequest"
            }
          },
          {
            "name": "authToken",
            "in": "header",
            "description": "Gets or sets the authentication token.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "CardPaymentCreditHolderRequest": {
      "description": "request object for CardPaymentCreditHolder",
      "type": "object",
      "properties": {
        "merchantId": {
          "format": "int32",
          "description": "The merchant identifier",
          "type": "integer"
        },
        "merchantSiteId": {
          "description": "The merchant site identifier",
          "type": "string"
        },
        "currency": {
          "description": "The currency of the order (ISO 4217)",
          "enum": [
            "unknown",
            "aed",
            "afn",
            "all",
            "amd",
            "ang",
            "aoa",
            "ars",
            "aud",
            "awg",
            "azn",
            "bam",
            "bbd",
            "bdt",
            "bgn",
            "bhd",
            "bif",
            "bmd",
            "bnd",
            "bob",
            "bov",
            "brl",
            "bsd",
            "btn",
            "bwp",
            "byr",
            "bzd",
            "cad",
            "cdf",
            "che",
            "chf",
            "chw",
            "clf",
            "clp",
            "cny",
            "cop",
            "cou",
            "crc",
            "cuc",
            "cup",
            "cve",
            "czk",
            "djf",
            "dkk",
            "dop",
            "dzd",
            "egp",
            "ern",
            "etb",
            "eur",
            "fjd",
            "fkp",
            "gbp",
            "gel",
            "ghs",
            "gip",
            "gmd",
            "gnf",
            "gtq",
            "gyd",
            "hkd",
            "hnl",
            "hrk",
            "htg",
            "huf",
            "idr",
            "ils",
            "inr",
            "iqd",
            "irr",
            "isk",
            "jmd",
            "jod",
            "jpy",
            "kes",
            "kgs",
            "khr",
            "kmf",
            "kpw",
            "krw",
            "kwd",
            "kyd",
            "kzt",
            "lak",
            "lbp",
            "lkr",
            "lrd",
            "lsl",
            "lyd",
            "mad",
            "mdl",
            "mga",
            "mkd",
            "mmk",
            "mnt",
            "mop",
            "mro",
            "mur",
            "mvr",
            "mwk",
            "mxn",
            "mxv",
            "myr",
            "mzn",
            "nad",
            "ngn",
            "nio",
            "nok",
            "npr",
            "nzd",
            "omr",
            "pab",
            "pen",
            "pgk",
            "php",
            "pkr",
            "pln",
            "pyg",
            "qar",
            "ron",
            "rsd",
            "rub",
            "rwf",
            "sar",
            "sbd",
            "scr",
            "sdg",
            "sek",
            "sgd",
            "shp",
            "sll",
            "sos",
            "srd",
            "ssp",
            "std",
            "svc",
            "syp",
            "szl",
            "thb",
            "tjs",
            "tmt",
            "tnd",
            "top",
            "try",
            "ttd",
            "twd",
            "tzs",
            "uah",
            "ugx",
            "usd",
            "usn",
            "uyi",
            "uyu",
            "uzs",
            "vef",
            "vnd",
            "vuv",
            "wst",
            "xaf",
            "xag",
            "xau",
            "xba",
            "xbb",
            "xbc",
            "xbd",
            "xcd",
            "xdr",
            "xof",
            "xpd",
            "xpf",
            "xpt",
            "xsu",
            "xts",
            "xua",
            "xxx",
            "yer",
            "zar",
            "zmw",
            "zwl"
          ],
          "type": "string"
        },
        "country": {
          "description": "The code of the country (ISO 3166-1 alpha-2)",
          "enum": [
            "unknown",
            "aw",
            "af",
            "ao",
            "ai",
            "al",
            "ad",
            "an",
            "ae",
            "ar",
            "am",
            "as",
            "aq",
            "tf",
            "ag",
            "au",
            "at",
            "az",
            "bi",
            "be",
            "bj",
            "bf",
            "bd",
            "bg",
            "bh",
            "bs",
            "ba",
            "by",
            "bz",
            "bm",
            "bo",
            "br",
            "bb",
            "bn",
            "bt",
            "bv",
            "bw",
            "cf",
            "ca",
            "cc",
            "ch",
            "cl",
            "cn",
            "ci",
            "cm",
            "cg",
            "ck",
            "co",
            "km",
            "cv",
            "cr",
            "cu",
            "cx",
            "ky",
            "cy",
            "cz",
            "de",
            "dj",
            "dm",
            "dk",
            "do",
            "dz",
            "ec",
            "eg",
            "er",
            "eh",
            "es",
            "ee",
            "et",
            "fi",
            "fj",
            "fk",
            "fr",
            "fo",
            "fm",
            "ga",
            "gb",
            "ge",
            "gh",
            "gi",
            "gn",
            "gp",
            "gm",
            "gw",
            "gq",
            "gr",
            "gd",
            "gl",
            "gt",
            "gf",
            "gu",
            "gy",
            "hk",
            "hm",
            "hn",
            "hr",
            "ht",
            "hu",
            "id",
            "in",
            "io",
            "ie",
            "ir",
            "iq",
            "is",
            "il",
            "it",
            "jm",
            "jo",
            "jp",
            "kz",
            "ke",
            "kg",
            "kh",
            "ki",
            "kn",
            "kr",
            "kw",
            "la",
            "lb",
            "lr",
            "ly",
            "lc",
            "li",
            "lk",
            "ls",
            "lt",
            "lu",
            "lv",
            "mo",
            "ma",
            "mc",
            "md",
            "mg",
            "mv",
            "mx",
            "mh",
            "mk",
            "ml",
            "mt",
            "mm",
            "mn",
            "mp",
            "mz",
            "mr",
            "ms",
            "mq",
            "mu",
            "mw",
            "my",
            "yt",
            "na",
            "nc",
            "ne",
            "nf",
            "ng",
            "ni",
            "nu",
            "nl",
            "no",
            "np",
            "nr",
            "nz",
            "om",
            "pk",
            "pa",
            "pn",
            "pe",
            "ph",
            "pw",
            "pg",
            "pl",
            "pr",
            "kp",
            "pt",
            "py",
            "pf",
            "qa",
            "re",
            "ro",
            "ru",
            "rw",
            "sa",
            "sd",
            "sn",
            "sg",
            "gs",
            "sh",
            "sj",
            "sb",
            "sl",
            "sv",
            "sm",
            "so",
            "pm",
            "st",
            "sr",
            "sk",
            "si",
            "se",
            "sz",
            "sc",
            "sy",
            "tc",
            "td",
            "tg",
            "th",
            "tj",
            "tk",
            "tm",
            "tp",
            "to",
            "tt",
            "tn",
            "tr",
            "tv",
            "tw",
            "tz",
            "ug",
            "ua",
            "um",
            "uy",
            "us",
            "uz",
            "va",
            "vc",
            "ve",
            "vg",
            "vi",
            "vn",
            "vu",
            "wf",
            "ws",
            "ye",
            "za",
            "zm",
            "zw"
          ],
          "type": "string"
        },
        "customerRef": {
          "description": "The customer reference",
          "type": "string"
        },
        "creditRef": {
          "description": "The order reference linked to the schedule and transaction",
          "type": "string"
        },
        "creditTag": {
          "description": "The order tag is a label for the schedule",
          "type": "string"
        },
        "amount": {
          "format": "int32",
          "description": "The amount of the payment",
          "type": "integer"
        },
        "expirationDate": {
          "format": "date-time",
          "description": "The card's expiration date",
          "type": "string"
        },
        "cardNumber": {
          "description": "The card number",
          "type": "string"
        },
        "cardScheme": {
          "description": "The card type",
          "enum": [
            "none",
            "cb",
            "visa",
            "masterCard",
            "cdiscount",
            "casino",
            "cofinoga",
            "amex",
            "finaref",
            "aurore",
            "cdiscount_Cup",
            "diners",
            "exito",
            "exitoFranquicia",
            "payPal",
            "banContact",
            "pse",
            "paylib"
          ],
          "type": "string"
        }
      },
      "example": {
        "merchantId": 1,
        "merchantSiteId": "100",
        "currency": "eur",
        "country": "fr",
        "customerRef": "CustomerRef-46000",
        "creditRef": "CreditRef-67012",
        "creditTag": "CreditTag-6042",
        "amount": 59221,
        "expirationDate": "2020-09-03T00:00:00+02:00",
        "cardNumber": "5017670000005900",
        "cardScheme": "cb"
      }
    },
    "CardPaymentCreditHolderResponse": {
      "description": "Response object for CardPaymentCreditHolder",
      "type": "object",
      "properties": {
        "responseCode": {
          "description": "The response code of the service",
          "type": "string"
        },
        "merchantAccountRef": {
          "description": "The MerchantAccountRef used for the credit",
          "type": "string"
        },
        "responseMessage": {
          "description": "The response code of the service",
          "type": "string"
        }
      }
    },
    "Card3DsPaymentRequest": {
      "description": "The Card3DS Payment Request",
      "type": "object",
      "properties": {
        "returnUrl": {
          "description": "Url for the return after the payment process",
          "type": "string"
        },
        "context": {
          "$ref": "#/definitions/CardPaymentContextData",
          "description": "Gets or Sets ContextData"
        },
        "options": {
          "$ref": "#/definitions/Options",
          "description": "Gets or Sets Options"
        },
        "order": {
          "$ref": "#/definitions/Order",
          "description": "Gets or Sets Order"
        },
        "card": {
          "$ref": "#/definitions/CardData",
          "description": "Gets or Sets CardData"
        },
        "storedCard": {
          "$ref": "#/definitions/StoredCard",
          "description": "Gets or Sets StoredCardData"
        },
        "validationMode": {
          "$ref": "#/definitions/ValidationModeOverride",
          "description": "Gets or Sets ValidationModeOverride"
        },
        "notificationUrl": {
          "description": "Url for the notification of the payment",
          "type": "string"
        }
      },
      "example": {
        "returnUrl": "http://merchant.com/return",
        "context": {
          "merchantId": 1,
          "merchantSiteId": "100",
          "currency": "eur",
          "country": "fr",
          "paymentOptionRef": "21",
          "customerRef": "CUSTOMER01",
          "paymentAttempt": 1
        },
        "options": {
          "ReportDelayInDays": null,
          "AllowCardStorage": null
        },
        "order": {
          "orderRef": "Test_201909031614",
          "invoiceId": 12345,
          "orderTag": null,
          "orderDate": "2019-09-03T16:14:41.4050118+02:00",
          "amount": 4337
        },
        "card": {
          "cardOptionId": null,
          "cardScheme": "cb",
          "expirationDate": "2020-09-03T16:14:41.4059691+02:00",
          "cardNumber": "5017670000001800",
          "securityNumber": "123",
          "cardLabel": "John Doe"
        },
        "storedCard": null,
        "validationMode": null,
        "notificationUrl": "http://merchant.com/notification"
      }
    },
    "CardPaymentContextData": {
      "description": "All context data needed",
      "type": "object",
      "properties": {
        "merchantId": {
          "format": "int32",
          "description": "The merchant identifier",
          "type": "integer"
        },
        "merchantSiteId": {
          "description": "The merchant site identifier",
          "type": "string"
        },
        "currency": {
          "description": "The currency of the order (ISO 4217)",
          "enum": [
            "unknown",
            "aed",
            "afn",
            "all",
            "amd",
            "ang",
            "aoa",
            "ars",
            "aud",
            "awg",
            "azn",
            "bam",
            "bbd",
            "bdt",
            "bgn",
            "bhd",
            "bif",
            "bmd",
            "bnd",
            "bob",
            "bov",
            "brl",
            "bsd",
            "btn",
            "bwp",
            "byr",
            "bzd",
            "cad",
            "cdf",
            "che",
            "chf",
            "chw",
            "clf",
            "clp",
            "cny",
            "cop",
            "cou",
            "crc",
            "cuc",
            "cup",
            "cve",
            "czk",
            "djf",
            "dkk",
            "dop",
            "dzd",
            "egp",
            "ern",
            "etb",
            "eur",
            "fjd",
            "fkp",
            "gbp",
            "gel",
            "ghs",
            "gip",
            "gmd",
            "gnf",
            "gtq",
            "gyd",
            "hkd",
            "hnl",
            "hrk",
            "htg",
            "huf",
            "idr",
            "ils",
            "inr",
            "iqd",
            "irr",
            "isk",
            "jmd",
            "jod",
            "jpy",
            "kes",
            "kgs",
            "khr",
            "kmf",
            "kpw",
            "krw",
            "kwd",
            "kyd",
            "kzt",
            "lak",
            "lbp",
            "lkr",
            "lrd",
            "lsl",
            "lyd",
            "mad",
            "mdl",
            "mga",
            "mkd",
            "mmk",
            "mnt",
            "mop",
            "mro",
            "mur",
            "mvr",
            "mwk",
            "mxn",
            "mxv",
            "myr",
            "mzn",
            "nad",
            "ngn",
            "nio",
            "nok",
            "npr",
            "nzd",
            "omr",
            "pab",
            "pen",
            "pgk",
            "php",
            "pkr",
            "pln",
            "pyg",
            "qar",
            "ron",
            "rsd",
            "rub",
            "rwf",
            "sar",
            "sbd",
            "scr",
            "sdg",
            "sek",
            "sgd",
            "shp",
            "sll",
            "sos",
            "srd",
            "ssp",
            "std",
            "svc",
            "syp",
            "szl",
            "thb",
            "tjs",
            "tmt",
            "tnd",
            "top",
            "try",
            "ttd",
            "twd",
            "tzs",
            "uah",
            "ugx",
            "usd",
            "usn",
            "uyi",
            "uyu",
            "uzs",
            "vef",
            "vnd",
            "vuv",
            "wst",
            "xaf",
            "xag",
            "xau",
            "xba",
            "xbb",
            "xbc",
            "xbd",
            "xcd",
            "xdr",
            "xof",
            "xpd",
            "xpf",
            "xpt",
            "xsu",
            "xts",
            "xua",
            "xxx",
            "yer",
            "zar",
            "zmw",
            "zwl"
          ],
          "type": "string"
        },
        "country": {
          "description": "The code of the country (ISO 3166-1 alpha-2)",
          "enum": [
            "unknown",
            "aw",
            "af",
            "ao",
            "ai",
            "al",
            "ad",
            "an",
            "ae",
            "ar",
            "am",
            "as",
            "aq",
            "tf",
            "ag",
            "au",
            "at",
            "az",
            "bi",
            "be",
            "bj",
            "bf",
            "bd",
            "bg",
            "bh",
            "bs",
            "ba",
            "by",
            "bz",
            "bm",
            "bo",
            "br",
            "bb",
            "bn",
            "bt",
            "bv",
            "bw",
            "cf",
            "ca",
            "cc",
            "ch",
            "cl",
            "cn",
            "ci",
            "cm",
            "cg",
            "ck",
            "co",
            "km",
            "cv",
            "cr",
            "cu",
            "cx",
            "ky",
            "cy",
            "cz",
            "de",
            "dj",
            "dm",
            "dk",
            "do",
            "dz",
            "ec",
            "eg",
            "er",
            "eh",
            "es",
            "ee",
            "et",
            "fi",
            "fj",
            "fk",
            "fr",
            "fo",
            "fm",
            "ga",
            "gb",
            "ge",
            "gh",
            "gi",
            "gn",
            "gp",
            "gm",
            "gw",
            "gq",
            "gr",
            "gd",
            "gl",
            "gt",
            "gf",
            "gu",
            "gy",
            "hk",
            "hm",
            "hn",
            "hr",
            "ht",
            "hu",
            "id",
            "in",
            "io",
            "ie",
            "ir",
            "iq",
            "is",
            "il",
            "it",
            "jm",
            "jo",
            "jp",
            "kz",
            "ke",
            "kg",
            "kh",
            "ki",
            "kn",
            "kr",
            "kw",
            "la",
            "lb",
            "lr",
            "ly",
            "lc",
            "li",
            "lk",
            "ls",
            "lt",
            "lu",
            "lv",
            "mo",
            "ma",
            "mc",
            "md",
            "mg",
            "mv",
            "mx",
            "mh",
            "mk",
            "ml",
            "mt",
            "mm",
            "mn",
            "mp",
            "mz",
            "mr",
            "ms",
            "mq",
            "mu",
            "mw",
            "my",
            "yt",
            "na",
            "nc",
            "ne",
            "nf",
            "ng",
            "ni",
            "nu",
            "nl",
            "no",
            "np",
            "nr",
            "nz",
            "om",
            "pk",
            "pa",
            "pn",
            "pe",
            "ph",
            "pw",
            "pg",
            "pl",
            "pr",
            "kp",
            "pt",
            "py",
            "pf",
            "qa",
            "re",
            "ro",
            "ru",
            "rw",
            "sa",
            "sd",
            "sn",
            "sg",
            "gs",
            "sh",
            "sj",
            "sb",
            "sl",
            "sv",
            "sm",
            "so",
            "pm",
            "st",
            "sr",
            "sk",
            "si",
            "se",
            "sz",
            "sc",
            "sy",
            "tc",
            "td",
            "tg",
            "th",
            "tj",
            "tk",
            "tm",
            "tp",
            "to",
            "tt",
            "tn",
            "tr",
            "tv",
            "tw",
            "tz",
            "ug",
            "ua",
            "um",
            "uy",
            "us",
            "uz",
            "va",
            "vc",
            "ve",
            "vg",
            "vi",
            "vn",
            "vu",
            "wf",
            "ws",
            "ye",
            "za",
            "zm",
            "zw"
          ],
          "type": "string"
        },
        "paymentOptionRef": {
          "description": "The payment option reference",
          "type": "string"
        },
        "customerRef": {
          "description": "The customer reference",
          "type": "string"
        },
        "paymentAttempt": {
          "format": "int32",
          "description": "The payment attempt number",
          "type": "integer"
        }
      }
    },
    "Options": {
      "description": "",
      "type": "object",
      "properties": {
        "ReportDelayInDays": {
          "format": "int32",
          "description": "The report delay in days",
          "type": "integer"
        },
        "AllowCardStorage": {
          "description": "Allow card storage for the payment",
          "type": "boolean"
        }
      }
    },
    "Order": {
      "description": "All order data",
      "type": "object",
      "properties": {
        "orderRef": {
          "description": "The order reference linked to the schedule and transaction",
          "type": "string"
        },
        "invoiceId": {
          "format": "int64",
          "description": "The invoice identifier",
          "type": "integer"
        },
        "orderTag": {
          "description": "The order tag is a label for the schedule",
          "type": "string"
        },
        "orderDate": {
          "format": "date-time",
          "description": "Date of the order",
          "type": "string"
        },
        "amount": {
          "format": "int64",
          "description": "The amount of the payment",
          "type": "integer"
        }
      }
    },
    "CardData": {
      "description": "All card Data",
      "type": "object",
      "properties": {
        "cardOptionId": {
          "format": "int32",
          "description": "The card option identifier",
          "type": "integer"
        },
        "cardScheme": {
          "description": "The card type",
          "enum": [
            "none",
            "cb",
            "visa",
            "masterCard",
            "cdiscount",
            "casino",
            "cofinoga",
            "amex",
            "finaref",
            "aurore",
            "cdiscount_Cup",
            "diners",
            "exito",
            "exitoFranquicia",
            "payPal",
            "banContact",
            "pse",
            "paylib"
          ],
          "type": "string"
        },
        "expirationDate": {
          "format": "date-time",
          "description": "The card's expiration date",
          "type": "string"
        },
        "cardNumber": {
          "description": "The card number",
          "type": "string"
        },
        "securityNumber": {
          "description": "The Security number (CVV)",
          "type": "string"
        },
        "cardLabel": {
          "description": "The name of the card owner",
          "type": "string"
        }
      }
    },
    "StoredCard": {
      "description": "All StoredCard data",
      "type": "object",
      "properties": {
        "id": {
          "description": "The stored card identifier",
          "type": "string"
        },
        "label": {
          "description": "The label for the stored card (display only)",
          "type": "string"
        }
      }
    },
    "ValidationModeOverride": {
      "description": "All ValidationMode Overrided data",
      "type": "object",
      "properties": {
        "captureDelay": {
          "format": "int32",
          "description": "The delay capture overriden",
          "type": "integer"
        },
        "validationMode": {
          "description": "The validation mode",
          "enum": [
            "undefined",
            "auto",
            "manual"
          ],
          "type": "string"
        }
      }
    },
    "CardPaymentResponse": {
      "description": "The card payment response",
      "type": "object",
      "properties": {
        "merchantAccountRef": {
          "description": "The merchant account reference of the payment",
          "type": "string"
        },
        "responseCode": {
          "description": "The response code of the service",
          "enum": [
            "unknown",
            "succeeded",
            "badRequest",
            "refusedByBank",
            "failed",
            "pending"
          ],
          "type": "string"
        },
        "complementaryResponseCode": {
          "description": "The complementary code for more details",
          "enum": [
            "unknown",
            "amountLimitExceeded",
            "limitExceeded",
            "technicalProblem",
            "authorized",
            "bankFraudSuspicion",
            "cardExpired",
            "cardIssuerUnavailable",
            "cardholderNotAuthenticated",
            "dateOfValidityExpired",
            "duplicateRequest",
            "formatError",
            "fraudSuspicion",
            "illegalTransaction",
            "invalidAcceptor",
            "invalidAccount",
            "invalidCardIssuer",
            "invalidTransaction",
            "lostCard",
            "referenceNumberCannotBeFound",
            "referred",
            "refused",
            "requestedFunctionNotSupported",
            "securityBreach",
            "securityRulesViolated",
            "serverUnavailableNetworkRoutingAskedAgain",
            "stolenCard",
            "systemUnavailable",
            "temporaryBankServerUnavailability",
            "temporaryOfficeServerUnavailability",
            "transactionNotPermitted",
            "transactionTimedOut",
            "unknownAcquirerAccountCode",
            "unknownCard",
            "updateOfFileImpossible",
            "transactionArchived",
            "refusedByScoring",
            "refusedByScoring2",
            "notAvailable",
            "deprecatedCardToken",
            "exceededAuthorizedAmount",
            "reportDelayLimitExceeded"
          ],
          "type": "string"
        },
        "schedules": {
          "description": "All schedules data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduleLight"
          }
        },
        "storedCard": {
          "$ref": "#/definitions/StoredCard",
          "description": "Gets or Sets StoredCard"
        },
        "responseMessage": {
          "description": "The response code of the service",
          "type": "string"
        }
      }
    },
    "ScheduleLight": {
      "description": "All schedule data but for a light version (no detail)",
      "type": "object",
      "properties": {
        "amount": {
          "format": "int64",
          "description": "Gets or Sets Amount",
          "type": "integer"
        },
        "date": {
          "format": "date-time",
          "description": "Gets or Sets Date",
          "type": "string"
        },
        "rank": {
          "format": "int32",
          "description": "Gets or Sets Rank",
          "type": "integer"
        }
      }
    },
    "Card3DsPaymentPutRequest": {
      "description": "The CardPayment Request for the PUT",
      "type": "object",
      "properties": {
        "merchantId": {
          "format": "int32",
          "description": "The merchant identifier",
          "type": "integer"
        },
        "merchantSiteId": {
          "description": "The merchant site identifier",
          "type": "string"
        },
        "paymentRequestId": {
          "description": "The payment session identifier (guid), use it for 3DS payment",
          "type": "string"
        },
        "orderRef": {
          "description": "The order reference linked to the schedule and transaction",
          "type": "string"
        },
        "orderTag": {
          "description": "The order tag is a label for the schedule",
          "type": "string"
        }
      },
      "example": {
        "merchantId": 1,
        "merchantSiteId": "100",
        "paymentRequestId": "ed1337c28a614e02bd060c74803be9b8",
        "orderRef": "ORDER12345",
        "orderTag": "LABEL1"
      }
    },
    "CardPaymentRequest": {
      "description": "",
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/CardPaymentContextData",
          "description": "Gets or Sets ContextData"
        },
        "options": {
          "$ref": "#/definitions/Options",
          "description": "Gets or Sets Options"
        },
        "order": {
          "$ref": "#/definitions/Order",
          "description": "Gets or Sets Order"
        },
        "card": {
          "$ref": "#/definitions/CardData",
          "description": "Gets or Sets CardData"
        },
        "storedCard": {
          "$ref": "#/definitions/StoredCard",
          "description": "Gets or Sets StoredCardData"
        },
        "validationMode": {
          "$ref": "#/definitions/ValidationModeOverride",
          "description": "Gets or Sets ValidationModeOverride"
        },
        "notificationUrl": {
          "description": "Url for the notification of the payment",
          "type": "string"
        }
      },
      "example": {
        "context": {
          "merchantId": 1,
          "merchantSiteId": "100",
          "currency": "eur",
          "country": "fr",
          "paymentOptionRef": "1",
          "customerRef": "CUSTOMER01",
          "paymentAttempt": 1
        },
        "options": null,
        "order": {
          "orderRef": "Test_201909031614",
          "invoiceId": 12345,
          "orderTag": null,
          "orderDate": "2019-09-03T16:14:41.4843242+02:00",
          "amount": 1337
        },
        "card": {
          "cardOptionId": null,
          "cardScheme": "cb",
          "expirationDate": "2020-09-03T16:14:41.4843256+02:00",
          "cardNumber": "5017670000001800",
          "securityNumber": "123",
          "cardLabel": "John Doe"
        },
        "storedCard": null,
        "validationMode": null,
        "notificationUrl": "http://merchant.com/notification"
      }
    },
    "DuplicatePaymentRequest": {
      "description": "The AuthorByCopy Payment Request",
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/CardPaymentContextData",
          "description": "Gets or Sets ContextData"
        },
        "options": {
          "$ref": "#/definitions/Options",
          "description": "Gets or Sets Options"
        },
        "order": {
          "$ref": "#/definitions/Order",
          "description": "Gets or Sets Order"
        },
        "copyReference": {
          "$ref": "#/definitions/CopyReference",
          "description": "Gets or Sets CopyReference"
        },
        "validationMode": {
          "$ref": "#/definitions/ValidationModeOverride",
          "description": "Gets or Sets ValidationModeOverride"
        },
        "notificationUrl": {
          "description": "Url for the notification of the payment",
          "type": "string"
        }
      },
      "example": {
        "context": {
          "merchantId": 1,
          "merchantSiteId": "100",
          "currency": "eur",
          "country": "fr",
          "paymentOptionRef": "1",
          "customerRef": "CUSTOMER01",
          "paymentAttempt": 1
        },
        "options": null,
        "order": {
          "orderRef": "Test_201909031614",
          "invoiceId": 12345,
          "orderTag": null,
          "orderDate": "2019-09-03T16:14:41.5310775+02:00",
          "amount": 1337
        },
        "copyReference": {
          "fromOrderRef": "ORDER54321",
          "fromOrderTag": null
        },
        "validationMode": null,
        "notificationUrl": "http://merchant.com/notification"
      }
    },
    "CopyReference": {
      "description": "The Copy Data (mandatory for author by copy)",
      "type": "object",
      "properties": {
        "fromOrderRef": {
          "description": "The order reference to use for the copy",
          "type": "string"
        },
        "fromOrderTag": {
          "description": "The order label to use for the copy",
          "type": "string"
        }
      }
    },
    "DuplicatePaymentBatchRequest": {
      "description": "The AuthorByCopy batch Payment Request",
      "type": "object",
      "properties": {
        "duplicatePaymentRequestList": {
          "description": "Gets or Sets ContextData",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DuplicatePaymentRequest"
          }
        }
      },
      "example": {
        "duplicatePaymentRequestList": [
          {
            "context": {
              "merchantId": 1,
              "merchantSiteId": "100",
              "currency": "eur",
              "country": "fr",
              "paymentOptionRef": "1",
              "customerRef": "CUSTOMER01",
              "paymentAttempt": 1
            },
            "options": null,
            "order": {
              "orderRef": "Test_201909031614",
              "invoiceId": 12345,
              "orderTag": null,
              "orderDate": "2019-09-03T16:14:41.5488089+02:00",
              "amount": 1337
            },
            "copyReference": {
              "fromOrderRef": "ORDER54321",
              "fromOrderTag": null
            },
            "validationMode": null,
            "notificationUrl": "http://merchant.com/notification"
          },
          {
            "context": {
              "merchantId": 1,
              "merchantSiteId": "100",
              "currency": "eur",
              "country": "fr",
              "paymentOptionRef": "1",
              "customerRef": "CUSTOMER01",
              "paymentAttempt": 1
            },
            "options": null,
            "order": {
              "orderRef": "Test_201909031614_2",
              "invoiceId": 12345,
              "orderTag": null,
              "orderDate": "2019-09-03T16:14:41.5488135+02:00",
              "amount": 1337
            },
            "copyReference": {
              "fromOrderRef": "ORDER54321",
              "fromOrderTag": null
            },
            "validationMode": null,
            "notificationUrl": "http://merchant.com/notification"
          }
        ]
      }
    },
    "PaymentOptionsResponse": {
      "description": "All payment option list data for the response",
      "type": "object",
      "properties": {
        "responseCode": {
          "description": "The response code of the service",
          "enum": [
            "unknown",
            "success",
            "refused",
            "internalFailure"
          ],
          "type": "string"
        },
        "paymentOptions": {
          "description": "All payment options data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentOption"
          }
        },
        "responseMessage": {
          "description": "The response code of the service",
          "type": "string"
        }
      }
    },
    "PaymentOption": {
      "description": "All payment option data",
      "type": "object",
      "properties": {
        "paymentOptionRef": {
          "description": "The payment option reference",
          "type": "string"
        },
        "name": {
          "description": "The payment option name",
          "type": "string"
        },
        "active": {
          "description": "Indicates if the payment option is active or not",
          "type": "boolean"
        },
        "minAmount": {
          "format": "int64",
          "description": "The minimum amount allowed",
          "type": "integer"
        },
        "maxAmount": {
          "format": "int64",
          "description": "The maximum amount allowed",
          "type": "integer"
        },
        "storedCardsEnabled": {
          "description": "Indicates if stored cards are enabled or not",
          "type": "boolean"
        },
        "paymentScheduleRules": {
          "description": "All payment schedule rules data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentScheduleRule"
          }
        },
        "paymentFees": {
          "description": "All payment fees data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentFee"
          }
        },
        "paymentCards": {
          "description": "All payment cards data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentCard"
          }
        },
        "loanOffers": {
          "description": "All loan offers data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoanOffer"
          }
        },
        "acquiringBanks": {
          "description": "All acquiring banks data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AcquiringBank"
          }
        }
      }
    },
    "PaymentScheduleRule": {
      "description": "All payment schedule data",
      "type": "object",
      "properties": {
        "rank": {
          "format": "int32",
          "description": "The rank",
          "type": "integer"
        },
        "name": {
          "format": "int32",
          "description": "The amount distribution weight",
          "type": "integer"
        },
        "dateDelay": {
          "format": "int32",
          "description": "The date delay",
          "type": "integer"
        },
        "isBondRank": {
          "description": "Indicates if the rank is bonded or not",
          "type": "boolean"
        },
        "thresholdDay": {
          "format": "int32",
          "description": "The threshold day",
          "type": "integer"
        },
        "firstDueDay": {
          "format": "int32",
          "description": "The first due day",
          "type": "integer"
        },
        "firstDueMonthDelay": {
          "format": "int32",
          "description": "The first due month delay",
          "type": "integer"
        },
        "secondDueDay": {
          "format": "int32",
          "description": "The second due day",
          "type": "integer"
        },
        "secondDueMonthDelay": {
          "format": "int32",
          "description": "The second due month delay",
          "type": "integer"
        },
        "hasFees": {
          "description": "Indicates if the schedule rule has fees or not",
          "type": "boolean"
        }
      }
    },
    "PaymentFee": {
      "description": "All payment fee data",
      "type": "object",
      "properties": {
        "minAmount": {
          "format": "int64",
          "description": "The minimum amount allowed",
          "type": "integer"
        },
        "maxAmount": {
          "format": "int64",
          "description": "The maximum amount allowed",
          "type": "integer"
        },
        "rate": {
          "format": "int32",
          "description": "The rate",
          "type": "integer"
        },
        "amount": {
          "format": "int64",
          "description": "The amount",
          "type": "integer"
        },
        "startDate": {
          "format": "date-time",
          "description": "The start date",
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "description": "The end date",
          "type": "string"
        },
        "reportDelayMin": {
          "format": "int32",
          "description": "The minimum report delay",
          "type": "integer"
        },
        "reportDelayMax": {
          "format": "int32",
          "description": "The maximum report delay",
          "type": "integer"
        }
      }
    },
    "PaymentCard": {
      "description": "All payment card data",
      "type": "object",
      "properties": {
        "paymentCardRef": {
          "description": "The payment card reference",
          "type": "string"
        },
        "name": {
          "description": "The payment card name",
          "type": "string"
        },
        "paymentCardOptions": {
          "description": "All payment card options data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentCardOption"
          }
        }
      }
    },
    "LoanOffer": {
      "description": "All loan offer data",
      "type": "object",
      "properties": {
        "loanRef": {
          "description": "The loan offer reference",
          "type": "string"
        },
        "loanTerms": {
          "description": "All loan terms data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoanTerm"
          }
        }
      }
    },
    "AcquiringBank": {
      "description": "All acquiring bank data",
      "type": "object",
      "properties": {
        "acquiringBankRef": {
          "description": "The acquiring bank reference",
          "type": "string"
        },
        "name": {
          "description": "The acquiring bank name",
          "type": "string"
        },
        "active": {
          "description": "Indicates if the acquiring bank is active or not",
          "type": "boolean"
        }
      }
    },
    "PaymentCardOption": {
      "description": "All payment card option data",
      "type": "object",
      "properties": {
        "paymentCardOptionRef": {
          "description": "The payment card option reference",
          "type": "string"
        },
        "name": {
          "description": "The payment card option name",
          "type": "string"
        },
        "minAmount": {
          "format": "int64",
          "description": "The minimum amount allowed",
          "type": "integer"
        },
        "maxAmount": {
          "format": "int64",
          "description": "The maximum amount allowed",
          "type": "integer"
        },
        "totalBillingCycles": {
          "format": "int32",
          "description": "The total billing cycles",
          "type": "integer"
        },
        "effectiveRate": {
          "format": "int32",
          "description": "The effective rate",
          "type": "integer"
        },
        "cardOptionGroupName": {
          "description": "The card option group name",
          "type": "string"
        },
        "cardOptionGroupId": {
          "format": "int32",
          "description": "The card option group identifier",
          "type": "integer"
        },
        "cardOptionGroupPosition": {
          "format": "int32",
          "description": "The card option group position",
          "type": "integer"
        },
        "postponementDelayUnit": {
          "description": "The postponement lenght type",
          "enum": [
            "unknown",
            "day",
            "week",
            "month",
            "year"
          ],
          "type": "string"
        },
        "postponementDelay": {
          "format": "int32",
          "description": "The postponement lenght",
          "type": "integer"
        }
      }
    },
    "LoanTerm": {
      "description": "All loan term data",
      "type": "object",
      "properties": {
        "loanTermRef": {
          "description": "The loan term reference",
          "type": "string"
        },
        "minAmount": {
          "format": "int64",
          "description": "The minimum amount allowed",
          "type": "integer"
        },
        "maxAmount": {
          "format": "int64",
          "description": "The maximum amount allowed",
          "type": "integer"
        },
        "effectiveRate": {
          "format": "int32",
          "description": "The effective rate",
          "type": "integer"
        },
        "monthlyPayment": {
          "format": "int64",
          "description": "The monthly payment",
          "type": "integer"
        },
        "despositPercentage": {
          "format": "int32",
          "description": "The desposit percentage",
          "type": "integer"
        },
        "totalBillingCycles": {
          "format": "int32",
          "description": "The total billing cycles",
          "type": "integer"
        },
        "defaultTerm": {
          "description": "Indicates if the loan term is the default or not",
          "type": "boolean"
        },
        "startDate": {
          "format": "date-time",
          "description": "The start date",
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "description": "The end date",
          "type": "string"
        }
      }
    },
    "PaymentOptionsRequest": {
      "type": "object",
      "properties": {
        "merchantId": {
          "format": "int32",
          "description": "The merchant identifier",
          "type": "integer"
        },
        "merchantSiteId": {
          "description": "The merchant site identifier.",
          "type": "string"
        },
        "context": {
          "$ref": "#/definitions/PaymentOptionsContextData",
          "description": "The context data."
        }
      },
      "example": {
        "merchantId": 1,
        "merchantSiteId": "100",
        "context": {
          "currency": "eur",
          "country": "fr",
          "amount": 150
        }
      }
    },
    "PaymentOptionsContextData": {
      "description": "All context data needed",
      "type": "object",
      "properties": {
        "currency": {
          "description": "The currency of the order (ISO 4217)",
          "enum": [
            "unknown",
            "aed",
            "afn",
            "all",
            "amd",
            "ang",
            "aoa",
            "ars",
            "aud",
            "awg",
            "azn",
            "bam",
            "bbd",
            "bdt",
            "bgn",
            "bhd",
            "bif",
            "bmd",
            "bnd",
            "bob",
            "bov",
            "brl",
            "bsd",
            "btn",
            "bwp",
            "byr",
            "bzd",
            "cad",
            "cdf",
            "che",
            "chf",
            "chw",
            "clf",
            "clp",
            "cny",
            "cop",
            "cou",
            "crc",
            "cuc",
            "cup",
            "cve",
            "czk",
            "djf",
            "dkk",
            "dop",
            "dzd",
            "egp",
            "ern",
            "etb",
            "eur",
            "fjd",
            "fkp",
            "gbp",
            "gel",
            "ghs",
            "gip",
            "gmd",
            "gnf",
            "gtq",
            "gyd",
            "hkd",
            "hnl",
            "hrk",
            "htg",
            "huf",
            "idr",
            "ils",
            "inr",
            "iqd",
            "irr",
            "isk",
            "jmd",
            "jod",
            "jpy",
            "kes",
            "kgs",
            "khr",
            "kmf",
            "kpw",
            "krw",
            "kwd",
            "kyd",
            "kzt",
            "lak",
            "lbp",
            "lkr",
            "lrd",
            "lsl",
            "lyd",
            "mad",
            "mdl",
            "mga",
            "mkd",
            "mmk",
            "mnt",
            "mop",
            "mro",
            "mur",
            "mvr",
            "mwk",
            "mxn",
            "mxv",
            "myr",
            "mzn",
            "nad",
            "ngn",
            "nio",
            "nok",
            "npr",
            "nzd",
            "omr",
            "pab",
            "pen",
            "pgk",
            "php",
            "pkr",
            "pln",
            "pyg",
            "qar",
            "ron",
            "rsd",
            "rub",
            "rwf",
            "sar",
            "sbd",
            "scr",
            "sdg",
            "sek",
            "sgd",
            "shp",
            "sll",
            "sos",
            "srd",
            "ssp",
            "std",
            "svc",
            "syp",
            "szl",
            "thb",
            "tjs",
            "tmt",
            "tnd",
            "top",
            "try",
            "ttd",
            "twd",
            "tzs",
            "uah",
            "ugx",
            "usd",
            "usn",
            "uyi",
            "uyu",
            "uzs",
            "vef",
            "vnd",
            "vuv",
            "wst",
            "xaf",
            "xag",
            "xau",
            "xba",
            "xbb",
            "xbc",
            "xbd",
            "xcd",
            "xdr",
            "xof",
            "xpd",
            "xpf",
            "xpt",
            "xsu",
            "xts",
            "xua",
            "xxx",
            "yer",
            "zar",
            "zmw",
            "zwl"
          ],
          "type": "string"
        },
        "country": {
          "description": "The code of the country (ISO 3166-1 alpha-2)",
          "enum": [
            "unknown",
            "aw",
            "af",
            "ao",
            "ai",
            "al",
            "ad",
            "an",
            "ae",
            "ar",
            "am",
            "as",
            "aq",
            "tf",
            "ag",
            "au",
            "at",
            "az",
            "bi",
            "be",
            "bj",
            "bf",
            "bd",
            "bg",
            "bh",
            "bs",
            "ba",
            "by",
            "bz",
            "bm",
            "bo",
            "br",
            "bb",
            "bn",
            "bt",
            "bv",
            "bw",
            "cf",
            "ca",
            "cc",
            "ch",
            "cl",
            "cn",
            "ci",
            "cm",
            "cg",
            "ck",
            "co",
            "km",
            "cv",
            "cr",
            "cu",
            "cx",
            "ky",
            "cy",
            "cz",
            "de",
            "dj",
            "dm",
            "dk",
            "do",
            "dz",
            "ec",
            "eg",
            "er",
            "eh",
            "es",
            "ee",
            "et",
            "fi",
            "fj",
            "fk",
            "fr",
            "fo",
            "fm",
            "ga",
            "gb",
            "ge",
            "gh",
            "gi",
            "gn",
            "gp",
            "gm",
            "gw",
            "gq",
            "gr",
            "gd",
            "gl",
            "gt",
            "gf",
            "gu",
            "gy",
            "hk",
            "hm",
            "hn",
            "hr",
            "ht",
            "hu",
            "id",
            "in",
            "io",
            "ie",
            "ir",
            "iq",
            "is",
            "il",
            "it",
            "jm",
            "jo",
            "jp",
            "kz",
            "ke",
            "kg",
            "kh",
            "ki",
            "kn",
            "kr",
            "kw",
            "la",
            "lb",
            "lr",
            "ly",
            "lc",
            "li",
            "lk",
            "ls",
            "lt",
            "lu",
            "lv",
            "mo",
            "ma",
            "mc",
            "md",
            "mg",
            "mv",
            "mx",
            "mh",
            "mk",
            "ml",
            "mt",
            "mm",
            "mn",
            "mp",
            "mz",
            "mr",
            "ms",
            "mq",
            "mu",
            "mw",
            "my",
            "yt",
            "na",
            "nc",
            "ne",
            "nf",
            "ng",
            "ni",
            "nu",
            "nl",
            "no",
            "np",
            "nr",
            "nz",
            "om",
            "pk",
            "pa",
            "pn",
            "pe",
            "ph",
            "pw",
            "pg",
            "pl",
            "pr",
            "kp",
            "pt",
            "py",
            "pf",
            "qa",
            "re",
            "ro",
            "ru",
            "rw",
            "sa",
            "sd",
            "sn",
            "sg",
            "gs",
            "sh",
            "sj",
            "sb",
            "sl",
            "sv",
            "sm",
            "so",
            "pm",
            "st",
            "sr",
            "sk",
            "si",
            "se",
            "sz",
            "sc",
            "sy",
            "tc",
            "td",
            "tg",
            "th",
            "tj",
            "tk",
            "tm",
            "tp",
            "to",
            "tt",
            "tn",
            "tr",
            "tv",
            "tw",
            "tz",
            "ug",
            "ua",
            "um",
            "uy",
            "us",
            "uz",
            "va",
            "vc",
            "ve",
            "vg",
            "vi",
            "vn",
            "vu",
            "wf",
            "ws",
            "ye",
            "za",
            "zm",
            "zw"
          ],
          "type": "string"
        },
        "amount": {
          "format": "int64",
          "description": "The amount",
          "type": "integer"
        }
      }
    },
    "PaymentOperationsResponse": {
      "description": "All payment operation data for the response",
      "type": "object",
      "properties": {
        "orderRef": {
          "description": "The orderRef",
          "type": "string"
        },
        "orderTag": {
          "description": "The orderTag",
          "type": "string"
        },
        "responseCode": {
          "description": "The response code of the service",
          "enum": [
            "undetermined",
            "success",
            "refused",
            "refusedByBank",
            "internalFailure",
            "pending",
            "unavailable"
          ],
          "type": "string"
        },
        "schedules": {
          "description": "All schedules data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Schedule"
          }
        },
        "actionType": {
          "description": "The action type",
          "type": "string"
        },
        "responseMessage": {
          "description": "The response code of the service",
          "type": "string"
        }
      }
    },
    "Schedule": {
      "description": "All schedule data",
      "type": "object",
      "properties": {
        "amount": {
          "format": "int64",
          "description": "Gets or Sets Amount",
          "type": "integer"
        },
        "date": {
          "format": "date-time",
          "description": "Gets or Sets Date",
          "type": "string"
        },
        "rank": {
          "format": "int32",
          "description": "Gets or Sets Rank",
          "type": "integer"
        },
        "currency": {
          "description": "Gets or Sets Currency",
          "enum": [
            "unknown",
            "aed",
            "afn",
            "all",
            "amd",
            "ang",
            "aoa",
            "ars",
            "aud",
            "awg",
            "azn",
            "bam",
            "bbd",
            "bdt",
            "bgn",
            "bhd",
            "bif",
            "bmd",
            "bnd",
            "bob",
            "bov",
            "brl",
            "bsd",
            "btn",
            "bwp",
            "byr",
            "bzd",
            "cad",
            "cdf",
            "che",
            "chf",
            "chw",
            "clf",
            "clp",
            "cny",
            "cop",
            "cou",
            "crc",
            "cuc",
            "cup",
            "cve",
            "czk",
            "djf",
            "dkk",
            "dop",
            "dzd",
            "egp",
            "ern",
            "etb",
            "eur",
            "fjd",
            "fkp",
            "gbp",
            "gel",
            "ghs",
            "gip",
            "gmd",
            "gnf",
            "gtq",
            "gyd",
            "hkd",
            "hnl",
            "hrk",
            "htg",
            "huf",
            "idr",
            "ils",
            "inr",
            "iqd",
            "irr",
            "isk",
            "jmd",
            "jod",
            "jpy",
            "kes",
            "kgs",
            "khr",
            "kmf",
            "kpw",
            "krw",
            "kwd",
            "kyd",
            "kzt",
            "lak",
            "lbp",
            "lkr",
            "lrd",
            "lsl",
            "lyd",
            "mad",
            "mdl",
            "mga",
            "mkd",
            "mmk",
            "mnt",
            "mop",
            "mro",
            "mur",
            "mvr",
            "mwk",
            "mxn",
            "mxv",
            "myr",
            "mzn",
            "nad",
            "ngn",
            "nio",
            "nok",
            "npr",
            "nzd",
            "omr",
            "pab",
            "pen",
            "pgk",
            "php",
            "pkr",
            "pln",
            "pyg",
            "qar",
            "ron",
            "rsd",
            "rub",
            "rwf",
            "sar",
            "sbd",
            "scr",
            "sdg",
            "sek",
            "sgd",
            "shp",
            "sll",
            "sos",
            "srd",
            "ssp",
            "std",
            "svc",
            "syp",
            "szl",
            "thb",
            "tjs",
            "tmt",
            "tnd",
            "top",
            "try",
            "ttd",
            "twd",
            "tzs",
            "uah",
            "ugx",
            "usd",
            "usn",
            "uyi",
            "uyu",
            "uzs",
            "vef",
            "vnd",
            "vuv",
            "wst",
            "xaf",
            "xag",
            "xau",
            "xba",
            "xbb",
            "xbc",
            "xbd",
            "xcd",
            "xdr",
            "xof",
            "xpd",
            "xpf",
            "xpt",
            "xsu",
            "xts",
            "xua",
            "xxx",
            "yer",
            "zar",
            "zmw",
            "zwl"
          ],
          "type": "string"
        },
        "state": {
          "description": "State of the schedule",
          "enum": [
            "init",
            "inPayment",
            "payed",
            "confirmed",
            "refused",
            "cancelled",
            "pending",
            "undetermined",
            "discarded",
            "cashing",
            "cashed"
          ],
          "type": "string"
        },
        "capturedAmount": {
          "format": "int64",
          "description": "Gets or Sets CapturedAmount",
          "type": "integer"
        },
        "remainingAmount": {
          "format": "int64",
          "description": "Gets or Sets RemainingAmount",
          "type": "integer"
        },
        "cancelledAmount": {
          "format": "int64",
          "description": "Gets or Sets CancelledAmount",
          "type": "integer"
        },
        "refundedAmount": {
          "format": "int64",
          "description": "Gets or Sets RefundedAmount",
          "type": "integer"
        }
      }
    },
    "PaymentOperationsRequest": {
      "description": "All Payment Operation data for the request",
      "type": "object",
      "properties": {
        "merchantId": {
          "format": "int32",
          "description": "The merchant identifier",
          "type": "integer"
        },
        "merchantSiteId": {
          "description": "The merchant site identifier.",
          "type": "string"
        },
        "attempt": {
          "format": "int32",
          "description": "The number of attempts (usefull for CAPTURE).",
          "type": "integer"
        },
        "rank": {
          "format": "int32",
          "description": "The rank concerned by the operation",
          "type": "integer"
        },
        "amount": {
          "format": "int64",
          "description": "The amount",
          "type": "integer"
        }
      },
      "example": {
        "merchantId": 1,
        "merchantSiteId": "100",
        "attempt": 1,
        "rank": 1,
        "amount": 0
      }
    },
    "PaymentSessionRequest": {
      "description": "",
      "type": "object",
      "properties": {
        "merchantId": {
          "format": "int32",
          "description": "MerchantId",
          "type": "integer"
        },
        "merchantSiteId": {
          "description": "MerchantSiteId",
          "type": "string"
        },
        "customer": {
          "$ref": "#/definitions/Customer",
          "description": "Customer"
        },
        "orderData": {
          "$ref": "#/definitions/OrderData",
          "description": "OrderSummary"
        },
        "storedCardData": {
          "description": "StoredCardData",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StoredCard"
          }
        },
        "allowCardStorage": {
          "description": "Gets or sets a value indicating whether [allow card storage].",
          "type": "boolean"
        },
        "forcedCardOptionRef": {
          "description": "Gets or sets a value indicating whether [forced card option reference].",
          "type": "boolean"
        },
        "forcedCardStorage": {
          "description": "Gets or sets a value indicating whether [forced card storage].",
          "type": "boolean"
        },
        "forcedImmediateStoredCard": {
          "description": "Gets or sets a value indicating whether [forced immediate stored card].",
          "type": "boolean"
        },
        "configuration": {
          "$ref": "#/definitions/Configuration",
          "description": "Gets or sets the configuration."
        }
      },
      "example": {
        "merchantId": 1,
        "merchantSiteId": "100",
        "customer": {
          "billingAddress": {
            "city": "Bordeaux",
            "line1": "Rue du test",
            "line2": "Residence Test",
            "name": "Nom Prenom",
            "placeCalled": "Lieu dit",
            "zipCode": "33300"
          },
          "birthDate": "1999-09-03T16:14:42.3638424+02:00",
          "civility": "mister",
          "country": "fr",
          "customerIp": "127.0.0.1",
          "customerRef": "000000001LKF",
          "deliveryAddress": {
            "city": "Bordeaux",
            "line1": "Rue du test",
            "line2": "Residence Test",
            "name": "Nom Prenom",
            "placeCalled": "Lieu dit",
            "zipCode": "33300"
          },
          "email": "nom.prenom@gmail.com",
          "firstName": "Prenom",
          "lastName": "Nom",
          "mobilePhone": "0607080910",
          "phone": "0507080910"
        },
        "orderData": {
          "orderDiscountAmount": 200,
          "orderFeesAmount": 100,
          "orderRowsAmount": 1000,
          "orderShippingAmount": 300,
          "taxAmount": 0,
          "freeText": "text",
          "orders": [],
          "orderSummaryRef": "20190903161442REF",
          "shippingAddress": {
            "city": "Bordeaux",
            "line1": "Rue du test",
            "line2": "Residence Test",
            "name": "Nom Prenom",
            "placeCalled": "Lieu dit",
            "zipCode": "33300"
          },
          "orderRef": "20190903161442REF",
          "invoiceId": 20190903161442,
          "orderTag": "",
          "orderDate": "2019-09-03T16:14:42.3651262+02:00",
          "amount": 1000
        },
        "storedCardData": [
          {
            "id": "117af442acca4f788e0c279f845b7b64",
            "label": "StoredCard1"
          }
        ],
        "allowCardStorage": true,
        "forcedCardOptionRef": false,
        "forcedCardStorage": false,
        "forcedImmediateStoredCard": false,
        "configuration": {
          "culture": "FR",
          "formType": "iframe",
          "merchantBackUrl": "https://paymenttest.dev-cdiscount.com/TestPages/MerchantBack.aspx",
          "merchantHomeUrl": "https://paymenttest.dev-cdiscount.com/TestPages/MerchantHome.aspx",
          "merchantNotifyUrl": "https://paymenttest.dev-cdiscount.com/TestPages/MerchantNotify.aspx",
          "merchantReturnUrl": "https://paymenttest.dev-cdiscount.com/TestPages/MerchantReturn.aspx",
          "paymentOptionRef": "1",
          "reportDelayInDays": 0,
          "userAgent": "Firefox"
        }
      }
    },
    "Customer": {
      "description": "Customer",
      "type": "object",
      "properties": {
        "billingAddress": {
          "$ref": "#/definitions/ShippingAddress",
          "description": "Gets or sets the billing address."
        },
        "birthDate": {
          "format": "date-time",
          "description": "Gets or sets the birth date.",
          "type": "string"
        },
        "civility": {
          "description": "Gets or sets the civility.",
          "enum": [
            "unknown",
            "mister",
            "misses",
            "miss"
          ],
          "type": "string"
        },
        "country": {
          "description": "Gets or sets the country field.",
          "enum": [
            "unknown",
            "aw",
            "af",
            "ao",
            "ai",
            "al",
            "ad",
            "an",
            "ae",
            "ar",
            "am",
            "as",
            "aq",
            "tf",
            "ag",
            "au",
            "at",
            "az",
            "bi",
            "be",
            "bj",
            "bf",
            "bd",
            "bg",
            "bh",
            "bs",
            "ba",
            "by",
            "bz",
            "bm",
            "bo",
            "br",
            "bb",
            "bn",
            "bt",
            "bv",
            "bw",
            "cf",
            "ca",
            "cc",
            "ch",
            "cl",
            "cn",
            "ci",
            "cm",
            "cg",
            "ck",
            "co",
            "km",
            "cv",
            "cr",
            "cu",
            "cx",
            "ky",
            "cy",
            "cz",
            "de",
            "dj",
            "dm",
            "dk",
            "do",
            "dz",
            "ec",
            "eg",
            "er",
            "eh",
            "es",
            "ee",
            "et",
            "fi",
            "fj",
            "fk",
            "fr",
            "fo",
            "fm",
            "ga",
            "gb",
            "ge",
            "gh",
            "gi",
            "gn",
            "gp",
            "gm",
            "gw",
            "gq",
            "gr",
            "gd",
            "gl",
            "gt",
            "gf",
            "gu",
            "gy",
            "hk",
            "hm",
            "hn",
            "hr",
            "ht",
            "hu",
            "id",
            "in",
            "io",
            "ie",
            "ir",
            "iq",
            "is",
            "il",
            "it",
            "jm",
            "jo",
            "jp",
            "kz",
            "ke",
            "kg",
            "kh",
            "ki",
            "kn",
            "kr",
            "kw",
            "la",
            "lb",
            "lr",
            "ly",
            "lc",
            "li",
            "lk",
            "ls",
            "lt",
            "lu",
            "lv",
            "mo",
            "ma",
            "mc",
            "md",
            "mg",
            "mv",
            "mx",
            "mh",
            "mk",
            "ml",
            "mt",
            "mm",
            "mn",
            "mp",
            "mz",
            "mr",
            "ms",
            "mq",
            "mu",
            "mw",
            "my",
            "yt",
            "na",
            "nc",
            "ne",
            "nf",
            "ng",
            "ni",
            "nu",
            "nl",
            "no",
            "np",
            "nr",
            "nz",
            "om",
            "pk",
            "pa",
            "pn",
            "pe",
            "ph",
            "pw",
            "pg",
            "pl",
            "pr",
            "kp",
            "pt",
            "py",
            "pf",
            "qa",
            "re",
            "ro",
            "ru",
            "rw",
            "sa",
            "sd",
            "sn",
            "sg",
            "gs",
            "sh",
            "sj",
            "sb",
            "sl",
            "sv",
            "sm",
            "so",
            "pm",
            "st",
            "sr",
            "sk",
            "si",
            "se",
            "sz",
            "sc",
            "sy",
            "tc",
            "td",
            "tg",
            "th",
            "tj",
            "tk",
            "tm",
            "tp",
            "to",
            "tt",
            "tn",
            "tr",
            "tv",
            "tw",
            "tz",
            "ug",
            "ua",
            "um",
            "uy",
            "us",
            "uz",
            "va",
            "vc",
            "ve",
            "vg",
            "vi",
            "vn",
            "vu",
            "wf",
            "ws",
            "ye",
            "za",
            "zm",
            "zw"
          ],
          "type": "string"
        },
        "customerIp": {
          "description": "Gets or sets the customer ip field.",
          "type": "string"
        },
        "customerRef": {
          "description": "Gets or sets the customer reference field.",
          "type": "string"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/ShippingAddress",
          "description": "Gets or sets the delivery address."
        },
        "email": {
          "description": "Gets or sets the email.",
          "type": "string"
        },
        "firstName": {
          "description": "Gets or sets the first name.",
          "type": "string"
        },
        "lastName": {
          "description": "Gets or sets the last name.",
          "type": "string"
        },
        "mobilePhone": {
          "description": "Gets or sets the mobile phone.",
          "type": "string"
        },
        "phone": {
          "description": "Gets or sets the phone.",
          "type": "string"
        }
      }
    },
    "OrderData": {
      "description": "",
      "type": "object",
      "properties": {
        "orderDiscountAmount": {
          "format": "int64",
          "description": "Gets or sets the order discount amount.",
          "type": "integer"
        },
        "orderFeesAmount": {
          "format": "int64",
          "description": "<para>\r\n             Gets or sets the order fees amount.\r\n            </para>",
          "type": "integer"
        },
        "orderRowsAmount": {
          "format": "int64",
          "description": "Gets or sets the order rows amount.",
          "type": "integer"
        },
        "orderShippingAmount": {
          "format": "int64",
          "description": "Gets or sets the order shipping amount.",
          "type": "integer"
        },
        "taxAmount": {
          "format": "int64",
          "description": "Gets or sets the tax amount.",
          "type": "integer"
        },
        "freeText": {
          "description": "Gets or sets the free text.",
          "type": "string"
        },
        "orders": {
          "description": "Gets or sets the orders.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubOrder"
          }
        },
        "orderSummaryRef": {
          "description": "Gets or sets the order summary reference.",
          "type": "string"
        },
        "shippingAddress": {
          "$ref": "#/definitions/ShippingAddress",
          "description": "Gets or sets the shipping address."
        },
        "orderRef": {
          "description": "The order reference linked to the schedule and transaction",
          "type": "string"
        },
        "invoiceId": {
          "format": "int64",
          "description": "The invoice identifier",
          "type": "integer"
        },
        "orderTag": {
          "description": "The order tag is a label for the schedule",
          "type": "string"
        },
        "orderDate": {
          "format": "date-time",
          "description": "Date of the order",
          "type": "string"
        },
        "amount": {
          "format": "int64",
          "description": "The amount of the payment",
          "type": "integer"
        }
      }
    },
    "Configuration": {
      "description": "",
      "type": "object",
      "properties": {
        "culture": {
          "description": "Gets or sets the culture.",
          "type": "string"
        },
        "formType": {
          "description": "Gets or sets the type of the form.",
          "enum": [
            "default",
            "iframe"
          ],
          "type": "string"
        },
        "merchantBackUrl": {
          "description": "Gets or sets the merchant back URL.",
          "type": "string"
        },
        "merchantHomeUrl": {
          "description": "Gets or sets the merchant home URL.",
          "type": "string"
        },
        "merchantNotifyUrl": {
          "description": "Gets or sets the merchant notify URL.",
          "type": "string"
        },
        "merchantReturnUrl": {
          "description": "Gets or sets the merchant return URL.",
          "type": "string"
        },
        "paymentOptionRef": {
          "description": "Gets or sets the payment option reference.",
          "type": "string"
        },
        "reportDelayInDays": {
          "format": "int32",
          "description": "Gets or sets the report delay in days.",
          "type": "integer"
        },
        "userAgent": {
          "description": "Gets or sets the user agent.",
          "type": "string"
        }
      }
    },
    "ShippingAddress": {
      "description": "",
      "type": "object",
      "properties": {
        "city": {
          "description": "Gets or sets the city field.",
          "type": "string"
        },
        "line1": {
          "description": "Gets or sets the line1 field.",
          "type": "string"
        },
        "line2": {
          "description": "Gets or sets the line2 field.",
          "type": "string"
        },
        "name": {
          "description": "Gets or sets the name field.",
          "type": "string"
        },
        "placeCalled": {
          "description": "Gets or sets the place called field.",
          "type": "string"
        },
        "zipCode": {
          "description": "Gets or sets the zip code field.",
          "type": "string"
        }
      }
    },
    "SubOrder": {
      "description": "SubOrder",
      "type": "object",
      "properties": {
        "amount": {
          "format": "int64",
          "description": "Gets or sets the amount field.",
          "type": "integer"
        },
        "invoiceId": {
          "description": "Gets or sets the invoice identifier field.",
          "type": "string"
        },
        "orderAmountWithoutTax": {
          "format": "int64",
          "description": "Gets or sets the order amount without tax field.",
          "type": "integer"
        },
        "orderRef": {
          "description": "Gets or sets the order reference field.",
          "type": "string"
        },
        "taxAmount": {
          "format": "int64",
          "description": "Gets or sets the tax amount field.",
          "type": "integer"
        }
      }
    },
    "PaymentSessionResponse": {
      "description": "",
      "type": "object",
      "properties": {
        "operationSucceeded": {
          "description": "Gets or sets a value indicating whether this instance had success.",
          "type": "boolean"
        },
        "paymentSessionId": {
          "description": "Gets or sets the payment session identifier.",
          "type": "string"
        },
        "paymentSessionUrl": {
          "description": "Gets or sets the payment session URL.",
          "type": "string"
        },
        "responseMessage": {
          "description": "The response code of the service",
          "type": "string"
        }
      }
    },
    "GetSessionResponse": {
      "description": "All payment operation data for the response",
      "type": "object",
      "properties": {
        "orderRef": {
          "description": "The orderRef",
          "type": "string"
        },
        "responseCode": {
          "description": "The response code of the service",
          "enum": [
            "succeeded",
            "refused",
            "refusedByBank",
            "failed",
            "pending",
            "unknown",
            "cancelled",
            "notProcessed"
          ],
          "type": "string"
        },
        "complementaryResponseCode": {
          "description": "The complementary response code of the service",
          "enum": [
            "unknown",
            "amountLimitExceeded",
            "limitExceeded",
            "technicalProblem",
            "authorized",
            "bankFraudSuspicion",
            "cardExpired",
            "cardIssuerUnavailable",
            "cardholderNotAuthenticated",
            "dateOfValidityExpired",
            "duplicateRequest",
            "formatError",
            "fraudSuspicion",
            "illegalTransaction",
            "invalidAcceptor",
            "invalidAccount",
            "invalidCardIssuer",
            "invalidTransaction",
            "lostCard",
            "referenceNumberCannotBeFound",
            "referred",
            "refused",
            "requestedFunctionNotSupported",
            "securityBreach",
            "securityRulesViolated",
            "serverUnavailableNetworkRoutingAskedAgain",
            "stolenCard",
            "systemUnavailable",
            "temporaryBankServerUnavailability",
            "temporaryOfficeServerUnavailability",
            "transactionNotPermitted",
            "transactionTimedOut",
            "unknownAcquirerAccountCode",
            "unknownCard",
            "updateOfFileImpossible",
            "transactionArchived",
            "refusedByScoring",
            "paymentInformationFillingAttemptLimitExceeded",
            "refusedByScoring2",
            "notAvailable"
          ],
          "type": "string"
        },
        "responseMessage": {
          "description": "The response code of the service",
          "type": "string"
        }
      }
    },
    "StoredPaymentMethodResponse": {
      "description": "",
      "type": "object",
      "properties": {
        "storedPaymentMethodList": {
          "description": "Gets or sets the stored payment method list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StoredPaymentMethod"
          }
        },
        "responseMessage": {
          "description": "The response code of the service",
          "type": "string"
        }
      }
    },
    "StoredPaymentMethod": {
      "type": "object",
      "properties": {
        "lastTransactionDate": {
          "format": "date-time",
          "description": "The last transaction date associated",
          "type": "string"
        },
        "paymentMethodExpirationDate": {
          "format": "date-time",
          "description": "The expiration date",
          "type": "string"
        },
        "holderBirthDate": {
          "format": "date-time",
          "description": "The holder birth date",
          "type": "string"
        },
        "methodSubtype": {
          "description": "The payment method subtype",
          "type": "string"
        },
        "methodType": {
          "description": "The payment method type",
          "type": "string"
        },
        "customerRef": {
          "description": "The customer ref",
          "type": "string"
        },
        "paymentMethodRef": {
          "description": "The payment method ref",
          "type": "string"
        },
        "storedPaymentMethodId": {
          "description": "The stored payment method identifier",
          "type": "string"
        },
        "truncatedPaymentMethodNumber": {
          "description": "The truncated payment method number",
          "type": "string"
        }
      }
    },
    "StoredPaymentMethodRequest": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/CardPaymentContextData",
          "description": "Gets or Sets ContextData"
        },
        "card": {
          "$ref": "#/definitions/CardData",
          "description": "The card data"
        }
      },
      "example": {
        "context": {
          "merchantId": 1,
          "merchantSiteId": "100",
          "currency": "eur",
          "country": "fr",
          "paymentOptionRef": "1",
          "customerRef": "CUSTOMER01",
          "paymentAttempt": null
        },
        "card": {
          "cardOptionId": null,
          "cardScheme": "cb",
          "expirationDate": "2019-12-31T00:00:00",
          "cardNumber": "5017670000001800",
          "securityNumber": "123",
          "cardLabel": "Ma carte de test"
        }
      }
    }
  }
}